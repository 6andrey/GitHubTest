# This pipeline deploys SF code in ST (smoke-testing) org on scheule and creates git tag after successful deployment

name: 'Code Deploy - ST'

on:
  workflow_dispatch:
#  schedule:
#    - cron: '0 */3 * * *'

jobs:
  deploy-code-fake:
    name: 'Deploy Code (fake)'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Authenticate to ST (DevHub)'
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
#          sfdx auth:sfdxurl:store -f authfile -a devhub
      - name: Git Semantic Version
        - uses: PaulHatch/semantic-version@v5.0.3
          with:
              # The prefix to use to identify tags
            tag_prefix: "v"
              # A string which, if present in a git commit, indicates that a change represents a
              # major (breaking) change, supports regular expressions wrapped with '/'
            major_pattern: "(MAJOR)"
              # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
            major_regexp_flags: ""
              # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
            minor_pattern: "(MINOR)"
              # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
            minor_regexp_flags: ""
              # A string to determine the format of the version output
            version_format: "${major}.${minor}.${patch}-prerelease${increment}"
              # Optional path to check for changes. If any changes are detected in the path the
              # 'changed' output will true. Enter multiple paths separated by spaces.
            change_path: "src/my-service"
              # Named version, will be used as suffix for name version tag
            namespace: my-service
              # If this is set to true, *every* commit will be treated as a new version.
            bump_each_commit: false
              # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
            search_commit_body: false
              # The output method used to generate list of users, 'csv' or 'json'.
            user_format_type: "csv"
              # Prevents pre-v1.0.0 version from automatically incrementing the major version.
              # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
            enable_prerelease_mode: true

  create-git-tag:
    needs: deplpoy-code-fake
    runs-on: ubuntu-latest
    - uses: actions/checkout@v3
      name: 'Create git tag'
      run: | 
        echo ${{ steps.bdeploy-code-fake.outputs.version }}
        echo ${{ steps.bdeploy-code-fake.outputs.version_tag }}
        echo ${{ steps.bdeploy-code-fake.outputs.authors }}